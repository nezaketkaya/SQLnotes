# CREATE TABLE is a clause that tells SQL you want to create a new table.
CREATE TABLE table_name (
   column_1 data_type, 
   column_2 data_type, 
   column_3 data_type   );

CREATE TABLE celebs (id INTEGER, name TEXT, age INTEGER);
-----------------------------------------------------------------------------------------------------------------------------------------
# INSERT statement inserts a new row into a table.
# VALUES is a clause that indicates the data being inserted.

INSERT INTO celebs (id, name, age) VALUES (1, 'Dan Reynolds', 36);

# Instead of inserting each row in a separate INSERT statement, you can actually insert multiple rows in a single statement.

INSERT INTO table_name (col1, col2, col3)
VALUES (row1_val1, row1_val2, row1_val3), (row2_val1, row2_val2, row2_val3), (row3_val1, row3_val2, row3_val3);

## For the `DATE` data type, the format is YYYY-MM-DD.
------------------------------------------------------------------------------------------------------------------------------------------
# SELECT statements are used to fetch data from a database.
# name specifies the column to query data from.

SELECT name FROM table_name; 

# '*' allows you to select every column in a table without having to name each one individually.

SELECT * FROM table_name; 
-------------------------------------------------------------------------------------------------------------------------------------------
# ALTER TABLE changes an existing table. 

ALTER TABLE table_name
ADD COLUMN new_column_name data_type; ==>  ADD COLUMN is used to add a column to the table.
# We cannot specify what position to add a column to a table. By default, a new column will always be added at the end of the table. 

ALTER TABLE table_name
DROP COLUMN column_name; ==> DROP COLUMN is used to delete a column from the table.

ALTER TABLE table_name
RENAME COLUMN old_column_name TO new_column_name;  ==> RENAME COLUMN is used to change the name of a column.
-------------------------------------------------------------------------------------------------------------------------------------------
# UPDATE statement edits a row in a table.
# SET is a clause that indicates the column to edit.
# WHERE is a clause that indicates which row(s) to update with the new column value.

UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4;
--------------------------------------------------------------------------------------------------------------------------------------------
// The ALTER statement is used to modify columns. With ALTER, you can add columns, remove them, or even modify them.
// The UPDATE statement is used to modify rows. However, UPDATE can only update a row, and cannot remove or add rows.
--------------------------------------------------------------------------------------------------------------------------------------------
# DELETE FROM statement deletes one or more rows from a table. 
# IS NULL is a condition in SQL that returns true when the value is NULL and false otherwise.

DELETE FROM celebs 
WHERE twitter_handle IS NULL;

# To delete only a specific number of rows, we can utilize the LIMIT statement.

DELETE FROM table WHERE condition LIMIT 5;
--------------------------------------------------------------------------------------------------------------------------------------------
# CONSTRAINTS are applied after defining the data type for a column and provide rules for how that column can be used, 
allowing the database to reject data that doesn't meet specified restrictions.
# PRIMARY KEY columns can be used to uniquely identify the row.
# UNIQUE columns have a different value for every row.
This is similar to PRIMARY KEY except a table can have many different UNIQUE columns.

CREATE TABLE celebs (
   id INTEGER PRIMARY KEY, 
   name TEXT UNIQUE,
   date_of_birth TEXT NOT NULL,
   date_of_death TEXT DEFAULT 'Not Applicable' );
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
# AS is allows you to rename a column or table using an alias.

SELECT name AS 'Titles' FROM movies;

# We can alias multiple columns at a time in the same query.

SELECT course_id AS "Course ID", exercise_id AS "Exercise ID" 
FROM bugs;
--------------------------------------------------------------------------------------------------------------------------------------------
# DISTINCT is used to return unique values in the output.

SELECT tools 
FROM inventory;

tools
Hammer           
Nails
Nails
Nails
........................
SELECT DISTINCT tools 
FROM inventory;

tools
Hammer
Nails
--------------------------------------------------------------------------------------------------------------------------------------------
# Two columns can be compared using WHERE

SELECT x, y
FROM coordinates
WHERE x > y;















   
